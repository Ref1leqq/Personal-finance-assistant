import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import sqlite3
from datetime import datetime, timedelta
import threading
import re
import pandas as pd
import matplotlib.pyplot as plt 
import time   




class FinanceAssistantApp(tk.Tk): #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—ä—è–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å FinanceAssistantApp, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –∫–ª–∞—Å—Å–∞ tk.Tk. –ö–ª–∞—Å—Å Tk —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –æ–∫–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Tkinter.
    def __init__(self, user): #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ __init__, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä user.
        super().__init__() #–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å Tk, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–∫–Ω–∞ Tkinter.
        self.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")
        self.user = user #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user) –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        icon = PhotoImage(file="logo.png")
        self.iconphoto(False, icon) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç False —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ (–Ω–µ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–∫–æ–Ω). –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äì —ç—Ç–æ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_interface()



    def create_main_interface(self):
        # –í–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–µ–π–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∑–Ω–∞—á–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_frame = tk.Frame(self, bg="lightblue") #–ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Frame (—Ñ—Ä–µ–π–º–∞) —Å –∏–º–µ–Ω–µ–º top_frame. –§—Ä–µ–π–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤. –ê—Ä–≥—É–º–µ–Ω—Ç bg="lightblue" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–Ω–∏–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ—Ä–µ–π–º–∞.
        top_frame.pack(fill=tk.X) #–ú–µ—Ç–æ–¥ pack() —Ä–∞–∑–º–µ—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤ –æ–∫–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–∞—Ä–∞–º–µ—Ç—Ä fill=tk.X –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—Ä–µ–π–º –±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –∑–∞–ø–æ–ª–Ω—è—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –æ—Å–∏ X.

        user_icon = tk.Label(top_frame, text="üë§", font=("Arial", 24), bg="lightblue") #–°–æ–∑–¥–∞–µ—Ç—Å—è –º–µ—Ç–∫–∞ (–≤–∏–¥–∂–µ—Ç Label), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏–º–≤–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (üë§). –ú–µ—Ç–∫–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä—å –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞ top_frame. –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —à—Ä–∏—Ñ—Ç (font=("Arial", 24) ‚Äî Arial —Ä–∞–∑–º–µ—Ä–æ–º 24 –ø—É–Ω–∫—Ç–∞) –∏ —Ñ–æ–Ω (bg="lightblue").
        user_icon.pack(side=tk.LEFT, padx=15) #–ú–µ—Ç–∫–∞ —Å —Å–∏–º–≤–æ–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Å–ª–µ–≤–∞ (side=tk.LEFT) –∏ –æ—Ç—Å—Ç—É–ø–æ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤ 15 –ø–∏–∫—Å–µ–ª–µ–π (padx=15).

        user_label = tk.Label(top_frame, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.user[1]}!", font=("Arial", 16), bg="lightblue") #–ï—â–µ –æ–¥–Ω–∞ –º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ self.user[1] (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∏–Ω–¥–µ–∫—Å [1] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –®—Ä–∏—Ñ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ Arial —Ä–∞–∑–º–µ—Ä–æ–º 16 –ø—É–Ω–∫—Ç–æ–≤, –∞ —Ñ–æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–≤–µ—Ç–æ–º —Ñ—Ä–µ–π–º–∞.
        user_label.pack(side=tk.LEFT) #–ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Å–ª–µ–≤–∞.


        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self) #–°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Notebook –∏–∑ –º–æ–¥—É–ª—è ttk, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫. –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        notebook.pack(fill=tk.BOTH, expand=True) #–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω –∑–∞–Ω–∏–º–∞–ª –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –æ–±–µ–∏–º –æ—Å—è–º (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π) –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º fill=tk.BOTH –∏ expand=True.

        # –í–∫–ª–∞–¥–∫–∏
        self.home_page = tk.Frame(notebook) #–î–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—Ä–µ–π–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∏—Ö –≤–∫–ª–∞–¥–æ–∫. –≠—Ç–∏ —Ñ—Ä–µ–π–º—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É notebook.
        self.diagrams_page = tk.Frame(notebook)
        self.transactions_page = tk.Frame(notebook)
        self.goals_page = tk.Frame(notebook)
        self.reminders_page = tk.Frame(notebook)

        notebook.add(self.home_page, text="–ì–ª–∞–≤–Ω–∞—è") #–ö–∞–∂–¥–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä notebook —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ì–ª–∞–≤–Ω–∞—è", –≤—Ç–æ—Ä–∞—è ‚Äî "–î–∏–∞–≥—Ä–∞–º–º—ã" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
        notebook.add(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã")
        notebook.add(self.transactions_page, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        notebook.add(self.goals_page, text="–¶–µ–ª–∏")
        notebook.add(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self.setup_home_page()
        self.setup_diagrams_page()
        self.setup_transactions_page()
        self.setup_goals_page()
        self.setup_reminders_page()

#        self.check_reminders()

    def setup_home_page(self):
        tk.Label(self.home_page, text="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", font=("Arial", 16)).pack(pady=10) #–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ (Label) —Å —Ç–µ–∫—Å—Ç–æ–º "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è". –ú–µ—Ç–∫–∞ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (self.home_page) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞ Arial —Ä–∞–∑–º–µ—Ä–æ–º 16 –ø—É–Ω–∫—Ç–æ–≤. –ú–µ—Ç–æ–¥ .pack(pady=10) —Ä–∞–∑–º–µ—â–∞–µ—Ç –º–µ—Ç–∫—É —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.

        self.balance_label = tk.Label(self.home_page, text="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 RUB", font=("Arial", 14)) #–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ "0.00 RUB". –ú–µ—Ç–∫–∞ –∏–º–µ–µ—Ç —à—Ä–∏—Ñ—Ç Arial —Ä–∞–∑–º–µ—Ä–æ–º 14 –ø—É–Ω–∫—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.
        self.balance_label.pack(pady=10)

        self.earnings_label = tk.Label(self.home_page, text="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0.00 RUB", font=("Arial", 12)) #–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É, —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "0.00 RUB". –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–¥–µ—Å—å —É–º–µ–Ω—å—à–µ–Ω –¥–æ 12 –ø—É–Ω–∫—Ç–æ–≤, –∞ –æ—Ç—Å—Ç—É–ø—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 5 –ø–∏–∫—Å–µ–ª–µ–π.
        self.earnings_label.pack(pady=5)

        self.expenses_label = tk.Label(self.home_page, text="–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.expenses_label.pack(pady=5)

        tk.Button(self.home_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", command=self.add_transaction_window).pack(pady=10) #–°–æ–∑–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é". –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ add_transaction_window, –∫–æ—Ç–æ—Ä—ã–π, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.

        self.update_balance()

    def update_balance(self):
        conn = sqlite3.connect('users.db') #–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º users.db.
        cursor = conn.cursor() #–°–æ–∑–¥–∞—ë—Ç—Å—è –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
        cursor.execute('''
            SELECT SUM(CASE WHEN type = "–î–æ—Ö–æ–¥" THEN amount ELSE 0 END) as total_income,
                SUM(CASE WHEN type = "–†–∞—Å—Ö–æ–¥" THEN amount ELSE 0 END) as total_expense
            FROM transactions
            WHERE user_id = ?
        ''', (self.user[0],)) #–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ("–î–æ—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥") –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è amount. –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è –ø–æ –ø–æ–ª—é user_id, –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö—Ä–∞–Ω—è—â–∏–π—Å—è –≤ self.user[0].
        result = cursor.fetchone() #–ò–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞. –ú–µ—Ç–æ–¥ fetchone() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∏–ª–∏ None, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç).
        conn.close() #–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

        total_income = result[0] if result[0] is not None else 0.0 #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None, —Ç–æ –±–µ—Ä—É—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞; –∏–Ω–∞—á–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        total_expense = result[1] if result[1] is not None else 0.0
        current_balance = total_income - total_expense

        self.balance_label.config(text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} RUB") #–û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç—ã –º–µ—Ç–æ–∫ (balance_label, earnings_label, expenses_label) —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –±–∞–ª–∞–Ω—Å–∞, –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (:.2f).
                                                                                        #–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∑–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.earnings_label.config(text=f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_income:.2f} RUB")
        self.expenses_label.config(text=f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_expense:.2f} RUB")

    def setup_diagrams_page(self):
        tk.Label(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤", font=("Arial", 16)).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        tk.Button(
            self.diagrams_page,
            text="–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã",
            command=self.open_diagrams_window
        ).pack(pady=10)

    def open_diagrams_window(self):
        diagrams_window = tk.Toplevel(self) #–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Ç–∏–ø–∞ Toplevel, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–º –æ–∫–Ω–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        diagrams_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º")
        diagrams_window.geometry("400x400")

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        tk.Label(diagrams_window, text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:").pack(pady=5)
        data_type = tk.StringVar(value="–í—Å–µ") #–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞ StringVar –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ "–í—Å–µ".
        ttk.Combobox( #–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (Combobox) —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞: "–í—Å–µ", "–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã", "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã". –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data_type. –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –ø–æ 5 –ø–∏–∫—Å–µ–ª–µ–π.
            diagrams_window,
            textvariable=data_type,
            values=["–í—Å–µ", "–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã", "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã"]
        ).pack(pady=5)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
        tk.Label(diagrams_window, text="–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:").pack(pady=5)
        chart_type = tk.StringVar(value="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞") #–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞ StringVar –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞".
        ttk.Combobox( #–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (Combobox) —Å —Ç—Ä–µ–º—è —Ç–∏–ø–∞–º–∏ –¥–∏–∞–≥—Ä–∞–º–º: "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)". –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chart_type. –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –ø–æ 5 –ø–∏–∫—Å–µ–ª–µ–π.
            diagrams_window,
            textvariable=chart_type,
            values=["–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)"]
        ).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        tk.Button( #–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É". –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ generate_chart —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã. –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.
            diagrams_window,
            text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É",
            command=lambda: self.generate_chart(data_type.get(), chart_type.get())
        ).pack(pady=10)

    def generate_chart(self, data_type, chart_type):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect('users.db') #–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º users.db.
        cursor = conn.cursor() #–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
        query = "SELECT category, amount, type FROM transactions WHERE user_id = ?"
        cursor.execute(query, (self.user[0],)) #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—É–º–º –∏ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ self.user[0]).
        data = cursor.fetchall() #–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–º, –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data.
        conn.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(data, columns=["Category", "Amount", "Type"]) #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ pandas DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ "Category", "Amount" –∏ "Type".

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if data_type == "–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã": #–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã, –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ —Å —Ç–∏–ø–æ–º "–î–æ—Ö–æ–¥"; –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã ‚Äî —Å —Ç–∏–ø–æ–º "–†–∞—Å—Ö–æ–¥".
            df = df[df["Type"] == "–î–æ—Ö–æ–¥"]
        elif data_type == "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã":
            df = df[df["Type"] == "–†–∞—Å—Ö–æ–¥"]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        if chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞": #–í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã –±—ã–ª –≤—ã–±—Ä–∞–Ω, –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ —Ü–≤–µ—Ç–Ω–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.
            self.plot_pie_chart(df)
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            self.plot_bar_chart(df)
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)":
            self.plot_gisto_chart(df)

    def plot_pie_chart(self, df): #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ plot_pie_chart, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç DataFrame (—Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
        plt.figure(figsize=(8, 8)) #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã (–≥—Ä–∞—Ñ–∏–∫–∞) —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 8x8 –¥—é–π–º–æ–≤.
        df.groupby("Category")["Amount"].sum().plot.pie(autopct='%1.1f%%', startangle=90) #–ì—Ä—É–ø–ø–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–ª–±—Ü—É "Category" –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "Amount". –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏—Ç—Å—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ (autopct='%1.1f%%') –∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞ –≤ 90 –≥—Ä–∞–¥—É—Å–æ–≤ (startangle=90).
        plt.title("–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞") #–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
        plt.ylabel("") #–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ —É –æ—Å–∏ Y (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏).
        plt.show() #–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.

    def plot_bar_chart(self, df): #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ plot_bar_chart, –∫–æ—Ç–æ—Ä–∞—è —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç DataFrame –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
        plt.figure(figsize=(10, 6)) #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 10x6 –¥—é–π–º–æ–≤.
        df.groupby("Category")["Amount"].sum().plot(kind="bar") #–ì—Ä—É–ø–ø–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–ª–±—Ü—É "Category" –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "Amount". –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏—Ç—Å—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞.
        plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞") #–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") #–ü–æ–¥–ø–∏—Å—å –æ—Å–∏ X.
        plt.ylabel("–°—É–º–º–∞") #–ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y.
        plt.show()

    def plot_gisto_chart(self, df): #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ plot_gisto_chart, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–π DataFrame.
        plt.figure(figsize=(8, 8)) #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 8x8 –¥—é–π–º–æ–≤.

        grouped = df.groupby("Category")["Amount"].sum() #–ì—Ä—É–ø–ø–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–ª–±—Ü—É "Category" –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "Amount".
        colors = ["red", "green", "blue", "purple", "orange"] #–°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.
        grouped.plot(kind="bar", color=colors[:len(grouped)]) #–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–≤—ã—Ö len(grouped) —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ colors.

        plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)") #–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") #–ü–æ–¥–ø–∏—Å—å –æ—Å–∏ X.
        plt.ylabel("–°—É–º–º–∞") #–ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y.
        plt.show() #–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.

    def setup_transactions_page(self): #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—ä—è–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ setup_transactions_page –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        tk.Label(self.transactions_page, text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", font=("Arial", 16)).pack(pady=10) #–ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–µ—Ç–∫–∞ (Label) —Å —Ç–µ–∫—Å—Ç–æ–º "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π". –û–Ω–∞ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (self.transactions_page), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç Arial —Ä–∞–∑–º–µ—Ä–æ–º 16 –ø–∏–∫—Å–µ–ª–µ–π. –ú–µ—Ç–∫—É —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.
        self.transactions_tree = ttk.Treeview(self.transactions_page, columns=("category", "amount","type", "date"), show="headings") #–°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç TreeView, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –£ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ —Å—Ç–æ–ª–±—Ü–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, —Ç–∏–ø –∏ –¥–∞—Ç–∞. –ü–∞—Ä–∞–º–µ—Ç—Ä show="headings" —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TreeView.
        self.transactions_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è") #–≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä text.
        self.transactions_tree.heading("amount", text="–°—É–º–º–∞")
        self.transactions_tree.heading("type", text="–¢–∏–ø")
        self.transactions_tree.heading("date", text="–î–∞—Ç–∞")
        self.transactions_tree.pack(fill=tk.BOTH, expand=True) #–¢–∞–±–ª–∏—Ü–∞ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–ª–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        self.update_transactions_list()

    def update_transactions_list(self): #–û–±—ä—è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥ update_transactions_list, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        conn = sqlite3.connect('users.db') 
        cursor = conn.cursor()
        cursor.execute("""
            SELECT category, amount, type, date FROM transactions WHERE user_id = ?
        """, (self.user[0],)) #–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–±–∏—Ä–∞—é—â–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å—É–º–º—É, —Ç–∏–ø –∏ –¥–∞—Ç—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ self.user[0]).
        transactions = cursor.fetchall() #–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π transactions. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
        conn.close()

        for row in self.transactions_tree.get_children(): #–û—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ TreeView –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            self.transactions_tree.delete(row)

        for transaction in transactions: #–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É TreeView. –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ—Ä—É—Ç—Å—è –ø—Ä—è–º–æ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ transaction.
            self.transactions_tree.insert("", tk.END, values=transaction)

    def add_transaction_window(self): #–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ add_transaction_window –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        add_window = tk.Toplevel(self) #–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (Toplevel), –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–º –æ–∫–Ω–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        add_window.geometry("300x400")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫

        tk.Label(add_window, text="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:").pack(pady=5)

        transaction_type = tk.StringVar(value="–†–∞—Å—Ö–æ–¥")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - "–†–∞—Å—Ö–æ–¥"

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        def update_categories(): #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ update_categories, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ("–î–æ—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥").
            if transaction_type.get() == "–î–æ—Ö–æ–¥":
                combobox["values"] = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥—ã", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]  # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            else:
                combobox["values"] = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–¢–∞–∫—Å–∏"]  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞

        income_radiobutton = tk.Radiobutton(add_window, text="–î–æ—Ö–æ–¥", variable=transaction_type, value="–î–æ—Ö–æ–¥", 
                                            command=update_categories)#–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ "–î–æ—Ö–æ–¥". –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è update_categories.
        income_radiobutton.pack()
        expense_radiobutton = tk.Radiobutton(add_window, text="–†–∞—Å—Ö–æ–¥", variable=transaction_type, value="–†–∞—Å—Ö–æ–¥",
                                             command=update_categories) #–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ "–†–∞—Å—Ö–æ–¥". –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "–î–æ—Ö–æ–¥", –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è update_categories.
        expense_radiobutton.pack()

        tk.Label(add_window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").pack(pady=5)

        # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        combobox = ttk.Combobox(add_window, state="readonly") #–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (–∫–æ–º–±–æ–±–æ–∫—Å) –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
        combobox.pack(padx=6, pady=6)

        #category_entry = tk.Entry(add_window, state=tk.DISABLED)  # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
        #category_entry.pack(padx=6, pady=6)

        tk.Label(add_window, text="–°—É–º–º–∞:").pack(pady=5) #–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–°—É–º–º–∞:" –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        amount_entry = tk.Entry(add_window)
        amount_entry.pack(pady=5)

        def save_transaction(): #–§—É–Ω–∫—Ü–∏—è save_transaction –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å—É–º–º—É –∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
            category = combobox.get() #if transaction_type.get() == "–î–æ—Ö–æ–¥" else combobox.get()
            amount = amount_entry.get()
            transaction_type_value = transaction_type.get()

            if not amount: #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –≤–≤–µ–¥–µ–Ω–∞ –ª–∏ —Å—É–º–º–∞. –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è.
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            try: #–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞.
                amount = float(amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            conn = sqlite3.connect('users.db') #–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É transactions, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO transactions (user_id, category, amount, date, type) VALUES (?, ?, ?, ?, ?)
            """, (self.user[0], category, amount, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), transaction_type_value))
            conn.commit()
            conn.close()

            if transaction_type_value == "–î–æ—Ö–æ–¥": #–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Ö–æ–¥–æ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ update_goal_progress –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
                self.update_goal_progress(amount)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!") #–í—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∞ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –±–∞–ª–∞–Ω—Å.
            add_window.destroy()
            self.update_transactions_list()
            self.update_balance()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_transaction).pack(pady=10) #–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é save_transaction –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.

    def setup_goals_page(self): #–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ setup_goals_page –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.
        tk.Label(self.goals_page, text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", font=("Arial", 16)).pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
        #–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π —Å —á–µ—Ç—ã—Ä—å–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞, —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è. –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –ø–æ 10 –ø–∏–∫—Å–µ–ª–µ–π.
        self.goals_tree = ttk.Treeview(self.goals_page, columns=("title", "target_amount", "current_amount", "remaining"), show="headings")
        self.goals_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.goals_tree.heading("target_amount", text="–¶–µ–ª—å (‚ÇΩ)")
        self.goals_tree.heading("current_amount", text="–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ (‚ÇΩ)")
        self.goals_tree.heading("remaining", text="–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏")
        self.goals_tree.pack(fill=tk.BOTH, expand=True, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
        tk.Button(self.goals_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", command=self.add_goal_window).pack(pady=10)
        #tk.Button(self.goals_page, text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å", command=self.top_up_goal).pack(pady=10)
        tk.Button(self.goals_page, text="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", command=self.delete_completed_goal).pack(pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        self.update_goals_list()  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π

    def top_up_goal(self): #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—ä—è–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ top_up_goal –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
        selected_item = self.goals_tree.selection() #–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ —Ü–µ–ª–µ–π (goals_tree). –ú–µ—Ç–æ–¥ selection() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        if not selected_item: #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞–∫–∞—è-—Ç–æ —Ü–µ–ª—å. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞.
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        item_values = self.goals_tree.item(selected_item)['values'] #–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–µ—Ä–µ–≤–∞ —Ü–µ–ª–µ–π. –ú–µ—Ç–æ–¥ item() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∫–µ, –≥–¥–µ –∫–ª—é—á 'values' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫.
        goal_id = item_values[0]  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
        current_amount = float(item_values[1])  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ü–µ–ª–∏

        top_up_window = tk.Toplevel(self)
        top_up_window.title("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏")
        top_up_window.geometry("300x200")

        tk.Label(top_up_window, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:").pack(pady=10)
        amount_entry = tk.Entry(top_up_window)
        amount_entry.pack(pady=10)

        #def save_top_up():
        #    try:
        #        amount = float(amount_entry.get())
        #        if amount <= 0:
        #            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")

        #        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        #        conn = sqlite3.connect('users.db')
        #        cursor = conn.cursor()

        #        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #        cursor.execute('SELECT balance FROM users WHERE id = ?', (self.user[0],))
        #        user_balance = cursor.fetchone()[0]

        #        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        #        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        #        if isinstance(user_balance, str):
        #            user_balance = float(user_balance)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

        #        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        #        if amount > user_balance:
        #            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ë–∞–ª–∞–Ω—Å: {user_balance}")
        #            conn.close()
        #            return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ü–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        #        cursor.execute('''
        #            UPDATE goals SET current_amount = current_amount + ? WHERE id = ?
        #        ''', (amount, goal_id))
        #        conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—É–º–º–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞)
        #        cursor.execute('''
        #            UPDATE users
        #            SET balance = balance - ?
        #            WHERE id = ?
        #        ''', (amount, self.user[0]))
        #        conn.commit()

        #        conn.close()

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        #        self.update_balance()  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        #        self.update_goals_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π

        #       messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¶–µ–ª—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {amount}‚ÇΩ.")
        #        top_up_window.destroy()

        #    except ValueError as e:
        #        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lambda, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å self –≤ –º–µ—Ç–æ–¥ save_top_up
        #tk.Button(top_up_window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=lambda: save_top_up()).pack(pady=10)

    def update_goals_list(self): #–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ update_goals_list –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for row in self.goals_tree.get_children(): #–¶–∏–∫–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –¥–µ—Ä–µ–≤–∞ —Ü–µ–ª–µ–π (self.goals_tree) –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π, –æ—á–∏—â–∞—è —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            self.goals_tree.delete(row)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, target_amount, current_amount, target_date
            FROM goals
            WHERE user_id = ?
        ''', (self.user[0],))  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goals = cursor.fetchall()
        conn.close()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        #added_buttons = {}

        for goal_id, title, target_amount, current_amount, target_date in goals: #–¶–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ü–µ–ª–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞, —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ –∏ —Å—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
            remaining_days = (datetime.strptime(target_date, "%Y-%m-%d") - datetime.now()).days #–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–æ —Å—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–°—Ä–æ–∫ –∏—Å—Ç—ë–∫".
            remaining_text = f"{remaining_days + 1} –¥–Ω." if remaining_days >= 0 else "–°—Ä–æ–∫ –∏—Å—Ç—ë–∫"

            if current_amount >= target_amount: #–ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –¥–µ—Ä–µ–≤–æ —Ü–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –µ—ë —Ç–µ–≥–æ–º "completed".
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(title, f"{current_amount}/{target_amount}", "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"),
                    tags=("completed",)
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å", –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                #if goal_id not in added_buttons:
                #    delete_button = tk.Button(
                #        self.goals_page,
                #        text="–£–¥–∞–ª–∏—Ç—å",
                #        command=lambda gid=goal_id: self.delete_completed_goal(gid)
                #    )
                #    delete_button.pack(pady=5)
                #    added_buttons[goal_id] = delete_button
            else:
                self.goals_tree.insert( #–ï—Å–ª–∏ —Ü–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –¥–µ—Ä–µ–≤–æ —Ü–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è, —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã, —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã –∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
                    "",
                    tk.END,
                    values=(
                        title,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
                        f"{target_amount}",  # –¶–µ–ª—å
                        f"{current_amount}",  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞
                        remaining_text  # –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏
                    )
                )

    def add_goal_window(self):
        add_goal_window = tk.Toplevel(self)
        add_goal_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
        add_goal_window.geometry("300x300")
        add_goal_window.resizable(False, False)

        tk.Label(add_goal_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:").pack(pady=10)
        title_entry = tk.Entry(add_goal_window)
        title_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–°—É–º–º–∞ —Ü–µ–ª–∏ (‚ÇΩ):").pack(pady=10)
        target_amount_entry = tk.Entry(add_goal_window)
        target_amount_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=10)
        target_date_entry = tk.Entry(add_goal_window)
        target_date_entry.pack(pady=5)


        #if not validate_date(targetdate):
        #    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        #    return


        def save_goal():
            title = title_entry.get()
            target_amount = target_amount_entry.get()
            target_date = target_date_entry.get()

            if not title or not target_amount or not target_date:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            if not validate_date(target_date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            try:
                target_amount = float(target_amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—è creation_date
            creation_date = datetime.now().strftime("%Y-%m-%d")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì–ì–ì-–ú–ú-–î–î"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO goals (user_id, title, target_amount, current_amount, target_date, creation_date)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (self.user[0], title, target_amount, 0, target_date, creation_date))  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ = 0
            conn.commit()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_goal_window.destroy()

            self.update_goals_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π

        tk.Button(add_goal_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å", command=save_goal).pack(pady=10)

    def setup_reminders_page(self):
        tk.Label(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", font=("Arial", 16)).pack(pady=10)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ TreeView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –£ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ —Å—Ç–æ–ª–±—Ü–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–∞—Ä–∞–º–µ—Ç—Ä show="headings" —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TreeView.
        self.reminders_tree = ttk.Treeview(self.reminders_page, columns=("Title", "Date", "Time", "Description"), show="headings")
        self.reminders_tree.heading("Title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.reminders_tree.heading("Date", text="–î–∞—Ç–∞")
        self.reminders_tree.heading("Time", text="–í—Ä–µ–º—è")
        self.reminders_tree.heading("Description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        self.reminders_tree.pack(fill=tk.BOTH, expand=True) #–£–ø–∞–∫–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–ª–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        self.reminders_tree.column("Time", stretch=False, width=100 ) #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞ "–í—Ä–µ–º—è" –Ω–∞ 100 –ø–∏–∫—Å–µ–ª–µ–π –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.



        tk.Button(self.reminders_page, text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.add_reminder_window).pack(pady=10)

        tk.Button(self.reminders_page, text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.delete_reminder).pack(pady=5)

        self.load_reminders() #–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ load_reminders, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º–µ—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ.

    def load_reminders(self): #–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ load_reminders –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        for item in self.reminders_tree.get_children(): #–ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É–¥–∞–ª—è—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
            self.reminders_tree.delete(item)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT title, date, time, description_reminder FROM reminders WHERE user_id = ?', (self.user[0],))
        for row in cursor.fetchall(): #–ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É.
            self.reminders_tree.insert("", tk.END, values=row)
        conn.close()

    def delete_reminder(self):
        selected_item = self.reminders_tree.selection() #–ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        item_values = self.reminders_tree.item(selected_item)['values'] #–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        title = item_values[0]
        date = item_values[1]
        time = item_values[2]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{title}'?"): #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("DELETE FROM reminders WHERE user_id=? AND title=? AND date=? AND time=?",
                               (self.user[0], title, date, time)) #–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –£—Å–ª–æ–≤–∏–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
                conn.commit()
                conn.close()

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ Treeview
                self.reminders_tree.delete(selected_item)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e: #–ù–∞—á–∏–Ω–∞–µ—Ç –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ –±–ª–æ–∫–µ try, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å—é–¥–∞.
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

    def add_reminder_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        add_window.geometry("300x400")
        add_window.resizable(False, False)

        tk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=5)
        title_entry = tk.Entry(add_window)
        title_entry.pack(pady=5)

        tk.Label(add_window, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=5)
        date_entry = tk.Entry(add_window)
        date_entry.pack(pady=5)

        tk.Label(add_window, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").pack(pady=5)
        time_entry = tk.Entry(add_window)
        time_entry.pack(pady=5)

        tk.Label(add_window, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(pady=5)
        description_entry = tk.Entry(add_window)
        description_entry.pack(pady=5)


        #def validate_date(date_str):
        #    try:
        #        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        #        return date >= datetime.now().date()
        #    except ValueError:
        #        return False

        def validate_time(time_str):
            try:
                datetime.strptime(time_str, "%H:%M")
                return True
            except ValueError:
                return False


        def save_reminder():
            title = title_entry.get()
            date = date_entry.get()
            time = time_entry.get()
            description = description_entry.get()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            if not title or not date or not time:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            if not validate_date(date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not validate_time(time):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
                return


            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try: #–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É reminders: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO reminders (user_id, title, date, time, description_reminder) 
                    VALUES (?, ?, ?, ?, ?)
                """, (self.user[0], title, date, time, description))
                conn.commit()
                conn.close()
                #–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                add_window.destroy()
                self.load_reminders()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_reminder).pack(pady=10)

        def check_reminders_db(self):
            def check_db():
                now = datetime.now()
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute('SELECT title, date, time FROM reminders WHERE user_id = ?', (self.user[0],))
                reminders = cursor.fetchall()
                conn.close()

                for title, date_str, time_str in reminders:
                    reminder_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                    if now <= reminder_time <= now + timedelta(minutes=1):
                        messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}")

                # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                self.after(60000, check_db)

            check_db()


        def check_db():
            now = datetime.now()
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('SELECT title, date, time FROM reminders WHERE user_id = ?', (self.user[0],))
            reminders = cursor.fetchall()
            conn.close()

            for title, date_str, time_str in reminders:
                reminder_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                if now <= reminder_time <= now + timedelta(minutes=1):
                    messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}")

            # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            self.after(60000, check_db)
            check_db()


            def check_reminders():
                print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω
                while True:
                    now = datetime.now()
                    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M')}")  # –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

                    try:
                        conn = sqlite3.connect('users.db')
                        cursor = conn.cursor()
                        cursor.execute('''
                            SELECT title, date, time
                            FROM reminders
                            WHERE user_id = ? AND date = ? AND time = ?
                        ''', (self.user[0], now.strftime("%Y-%m-%d"), "18:25"))
                        
                        reminders = cursor.fetchall()
                        conn.close()

                        if reminders:
                            for reminder in reminders:
                                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {reminder[0]}")  # –ü–µ—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"{reminder[0]} –Ω–∞—Å—Ç—É–ø–∏–ª–æ!")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            print("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            threading.Thread(target=check_reminders, daemon=True).start()  # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫




    def update_goal_progress(self, amount):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, current_amount, target_amount FROM goals WHERE user_id = ?
        ''', (self.user[0],))
        goals = cursor.fetchall()

        #if not goals:
        #    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        #    conn.close()
        #    return

        for goal_id, current_amount, target_amount in goals:
            new_amount = current_amount + amount

            if new_amount >= target_amount:
                cursor.execute('''
                    UPDATE goals SET current_amount = ?, target_amount = 0 WHERE id = ?
                ''', (target_amount, goal_id))
                messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", f"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            else:
                cursor.execute('''
                    UPDATE goals SET current_amount = ? WHERE id = ?
                ''', (new_amount, goal_id))

        conn.commit()
        conn.close()

        self.update_goals_list()

    def delete_completed_goal(self):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        selected_item = self.goals_tree.selection() #–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –¥–µ—Ä–µ–≤–µ —Ü–µ–ª–µ–π (goals_tree).
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item_values = self.goals_tree.item(selected_item)['values'] #–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–µ—Ä–µ–≤–∞ —Ü–µ–ª–µ–π. –ò–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π.
        title = item_values[0]

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å '{title}'?"):
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
                cursor.execute("""
                    DELETE FROM goals 
                    WHERE user_id = ? AND title = ?
                """, (self.user[0], title))
                conn.commit()
                conn.close()

                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ Treeview
                self.goals_tree.delete(selected_item)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å: {e}")

def validate_date(date_str):
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        return date >= datetime.now().date()
    except ValueError:
        return False

def clear_text():
    login_entry.delete(0, 'end')
    password_entry.delete(0, 'end')
    confirm_password_entry.delete(0, 'end')

def register():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()

    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return

    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (login, password) VALUES (?, ?)", (login, password))
        conn.commit()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        clear_text()
    except sqlite3.IntegrityError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    finally:
        conn.close()


def login():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()
    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return
    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return


    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE login = ? AND password = ?", (login, password))
    user = cursor.fetchone()
    conn.close()


    if user and password == confirm_password:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        window.destroy()
        app = FinanceAssistantApp(user)
        app.mainloop()
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


#create_db()

window = tk.Tk()
window.resizable(width=False, height=False)
window.title("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
window.geometry("800x600")

icon = PhotoImage(file= "logo.png")
window.iconphoto(False, icon)

app_label = tk.Label(window, text = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫",fg="#57a1f8", font=('Microsoft Yahei UI Light',23,'bold'), pady=40)
app_label.place(relx=.5,anchor="n")
login_label = tk.Label(window, text="–õ–æ–≥–∏–Ω:")
login_label.place(x=370,y=100)
login_entry = tk.Entry(window)
login_entry.place(x=300,y=130)

password_label = tk.Label(window, text="–ü–∞—Ä–æ–ª—å:")
password_label.place(x=367,y=180)
password_entry = tk.Entry(window, show="*")
password_entry.place(x=300, y = 210)

confirm_password_label = tk.Label(window, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:")
confirm_password_label.place(x=315, y = 260)
confirm_password_entry = tk.Entry(window, show="*")
confirm_password_entry.place(x=300, y = 290)

login_button = tk.Button(window, text="–í—Ö–æ–¥", command=login)
login_button.place(x=300,y=320)

register_button = tk.Button(window, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=register)
register_button.place(x=375,y=320)

window.mainloop()