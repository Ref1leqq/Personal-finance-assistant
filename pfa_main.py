import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import sqlite3
from datetime import datetime, timedelta
import re
import pandas as pd
import matplotlib.pyplot as plt 
import time   

def create_db():
    conn = sqlite3.connect('users.db') #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor() #—Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            login TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT,
            target_amount REAL NOT NULL,
            current_amount REAL DEFAULT 0,
            creation_date TEXT NOT NULL,
            target_date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            description_reminder TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            category TEXT NOT NULL,
            amount REAL NOT NULL,
            date TEXT NOT NULL,
            type TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    conn.commit()
    conn.close()

create_db()


class FinanceAssistantApp(tk.Tk):
    def __init__(self, user):
        super().__init__()
        self.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")
        self.user = user
        icon = PhotoImage(file="logo.png")
        self.iconphoto(False, icon)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_interface()
        self.check_reminders_loop()




    def create_main_interface(self):
        # –í–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–µ–π–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∑–Ω–∞—á–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_frame = tk.Frame(self, bg="lightblue")
        top_frame.pack(fill=tk.X)

        user_icon = tk.Label(top_frame, text="üë§", font=("Arial", 24), bg="lightblue")
        user_icon.pack(side=tk.LEFT, padx=15)

        user_label = tk.Label(top_frame, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.user[1]}!", font=("Arial", 16), bg="lightblue")
        user_label.pack(side=tk.LEFT)


        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self)
        notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∏
        self.home_page = tk.Frame(notebook)
        self.diagrams_page = tk.Frame(notebook)
        self.transactions_page = tk.Frame(notebook)
        self.goals_page = tk.Frame(notebook)
        self.reminders_page = tk.Frame(notebook)

        notebook.add(self.home_page, text="–ì–ª–∞–≤–Ω–∞—è")
        notebook.add(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã")
        notebook.add(self.transactions_page, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        notebook.add(self.goals_page, text="–¶–µ–ª–∏")
        notebook.add(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self.setup_home_page()
        self.setup_diagrams_page()
        self.setup_transactions_page()
        self.setup_goals_page()
        self.setup_reminders_page()


    def setup_home_page(self):
        tk.Label(self.home_page, text="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", font=("Arial", 16)).pack(pady=10)

        self.balance_label = tk.Label(self.home_page, text="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 RUB", font=("Arial", 14))
        self.balance_label.pack(pady=10)

        self.earnings_label = tk.Label(self.home_page, text="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.earnings_label.pack(pady=5)

        self.expenses_label = tk.Label(self.home_page, text="–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.expenses_label.pack(pady=5)

        tk.Button(self.home_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", command=self.add_transaction_window).pack(pady=10)

        self.update_balance()

    def update_balance(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT SUM(CASE WHEN type = "–î–æ—Ö–æ–¥" THEN amount ELSE 0 END) as total_income,
                SUM(CASE WHEN type = "–†–∞—Å—Ö–æ–¥" THEN amount ELSE 0 END) as total_expense
            FROM transactions
            WHERE user_id = ?
        ''', (self.user[0],))
        result = cursor.fetchone()
        conn.close()

        total_income = result[0] if result[0] is not None else 0.0
        total_expense = result[1] if result[1] is not None else 0.0
        current_balance = total_income - total_expense

        self.balance_label.config(text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} RUB")
        self.earnings_label.config(text=f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_income:.2f} RUB")
        self.expenses_label.config(text=f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_expense:.2f} RUB")

    def setup_diagrams_page(self):
        tk.Label(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤", font=("Arial", 16)).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        tk.Button(
            self.diagrams_page,
            text="–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã",
            command=self.open_diagrams_window
        ).pack(pady=10)

    def open_diagrams_window(self):
        diagrams_window = tk.Toplevel(self)
        diagrams_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º")
        diagrams_window.geometry("400x400")
        diagrams_window.resizable(False, False)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        tk.Label(diagrams_window, text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:").pack(pady=5)
        data_type = tk.StringVar(value="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        ttk.Combobox(
            diagrams_window,
            textvariable=data_type,
            state="readonly",
            values=["–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã", "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã"]
        ).pack(pady=5)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
        tk.Label(diagrams_window, text="–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:").pack(pady=5)
        chart_type = tk.StringVar(value="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
        ttk.Combobox(
            diagrams_window,
            textvariable=chart_type,
            state="readonly",
            values=["–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)"]
        ).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        tk.Button(
            diagrams_window,
            text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É",
            command=lambda: self.generate_chart(data_type.get(), chart_type.get())
        ).pack(pady=15)

    def generate_chart(self, data_type, chart_type):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        query = "SELECT category, amount, type FROM transactions WHERE user_id = ?"
        cursor.execute(query, (self.user[0],))
        data = cursor.fetchall()
        conn.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(data, columns=["Category", "Amount", "Type"])

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if data_type == "–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã":
            df = df[df["Type"] == "–î–æ—Ö–æ–¥"]
        elif data_type == "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã":
            df = df[df["Type"] == "–†–∞—Å—Ö–æ–¥"]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        if chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            self.plot_pie_chart(df)
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            self.plot_bar_chart(df)
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)":
            self.plot_gisto_chart(df)

    def plot_pie_chart(self, df):
        plt.figure(figsize=(8, 8))
        df.groupby("Category")["Amount"].sum().plot.pie(autopct='%1.1f%%', startangle=90)
        plt.title("–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
        plt.ylabel("")
        plt.show()

    def plot_bar_chart(self, df):
        plt.figure(figsize=(10, 6))
        df.groupby("Category")["Amount"].sum().plot(kind="bar")
        plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞")
        plt.show()

    def plot_gisto_chart(self, df):
        plt.figure(figsize=(8, 8))

        grouped = df.groupby("Category")["Amount"].sum()
        colors = ["red", "green", "blue", "purple", "orange"]
        grouped.plot(kind="bar", color=colors[:len(grouped)])

        plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞(–¶–≤–µ—Ç–∞)")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞")
        plt.show()

    def setup_transactions_page(self):
        tk.Label(self.transactions_page, text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", font=("Arial", 16)).pack(pady=10)
        self.transactions_tree = ttk.Treeview(self.transactions_page, columns=("category", "amount","type", "date"), show="headings")
        self.transactions_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.transactions_tree.heading("amount", text="–°—É–º–º–∞")
        self.transactions_tree.heading("type", text="–¢–∏–ø")
        self.transactions_tree.heading("date", text="–î–∞—Ç–∞")
        self.transactions_tree.pack(fill=tk.BOTH, expand=True)
        self.update_transactions_list()

    def update_transactions_list(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT category, amount, type, date FROM transactions WHERE user_id = ?
        """, (self.user[0],))
        transactions = cursor.fetchall()
        conn.close()

        for row in self.transactions_tree.get_children():
            self.transactions_tree.delete(row)

        for transaction in transactions:
            self.transactions_tree.insert("", tk.END, values=transaction)

    def add_transaction_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        add_window.geometry("300x400")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫

        tk.Label(add_window, text="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:").pack(pady=15)

        transaction_type = tk.StringVar(value="–†–∞—Å—Ö–æ–¥")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - "–†–∞—Å—Ö–æ–¥"

        # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_type = tk.StringVar(value="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        combobox = ttk.Combobox(add_window, textvariable=category_type, state="readonly")
        combobox.pack(padx=6, pady=6)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        def update_categories():
            if transaction_type.get() == "–î–æ—Ö–æ–¥":
                combobox["values"] = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥—ã", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
            else:
                combobox["values"] = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–¢–∞–∫—Å–∏"]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            category_type.set("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        income_radiobutton = tk.Radiobutton(add_window, text="–î–æ—Ö–æ–¥", variable=transaction_type, value="–î–æ—Ö–æ–¥",
                                            command=update_categories, pady=20)
        income_radiobutton.pack()
        expense_radiobutton = tk.Radiobutton(add_window, text="–†–∞—Å—Ö–æ–¥", variable=transaction_type, value="–†–∞—Å—Ö–æ–¥",
                                             command=update_categories, pady=5)
        expense_radiobutton.pack()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è "–†–∞—Å—Ö–æ–¥")
        combobox["values"] = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–¢–∞–∫—Å–∏"]
        category_type.set("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

        tk.Label(add_window, text="–°—É–º–º–∞:").pack(pady=15)
        amount_entry = tk.Entry(add_window)
        amount_entry.pack(pady=2)

        def save_transaction():
            category = category_type.get()  # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            amount = amount_entry.get()
            transaction_type_value = transaction_type.get()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
            if not amount:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É!")
                return

            try:
                amount = float(amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO transactions (user_id, category, amount, date, type) VALUES (?, ?, ?, ?, ?)
            """, (self.user[0], category, amount, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), transaction_type_value))
            conn.commit()
            conn.close()

            if transaction_type_value == "–î–æ—Ö–æ–¥":
                self.update_goal_progress(amount)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_window.destroy()
            self.update_transactions_list()
            self.update_balance()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_transaction).pack(pady=10)

    def setup_goals_page(self):
        tk.Label(self.goals_page, text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", font=("Arial", 16)).pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
        self.goals_tree = ttk.Treeview(self.goals_page, columns=("title", "target_amount", "current_amount", "remaining"), show="headings")
        self.goals_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.goals_tree.heading("target_amount", text="–¶–µ–ª—å (‚ÇΩ)")
        self.goals_tree.heading("current_amount", text="–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ (‚ÇΩ)")
        self.goals_tree.heading("remaining", text="–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏")
        self.goals_tree.pack(fill=tk.BOTH, expand=True, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
        tk.Button(self.goals_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", command=self.add_goal_window).pack(pady=10)
        #tk.Button(self.goals_page, text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å", command=self.top_up_goal).pack(pady=10)
        tk.Button(self.goals_page, text="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", command=self.delete_completed_goal).pack(pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        self.update_goals_list()  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π

    def top_up_goal(self):
        selected_item = self.goals_tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        item_values = self.goals_tree.item(selected_item)['values']
        goal_id = item_values[0]  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
        current_amount = float(item_values[1])  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ü–µ–ª–∏

        top_up_window = tk.Toplevel(self)
        top_up_window.title("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏")
        top_up_window.geometry("300x200")

        tk.Label(top_up_window, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:").pack(pady=10)
        amount_entry = tk.Entry(top_up_window)
        amount_entry.pack(pady=10)


    def update_goals_list(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for row in self.goals_tree.get_children():
            self.goals_tree.delete(row)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, target_amount, current_amount, target_date
            FROM goals
            WHERE user_id = ?
        ''', (self.user[0],))  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goals = cursor.fetchall()
        conn.close()


        for goal_id, title, target_amount, current_amount, target_date in goals:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
            remaining_days = (datetime.strptime(target_date, "%Y-%m-%d") - datetime.now()).days
            remaining_text = f"{remaining_days + 1} –¥–Ω." if remaining_days >= 0 else "–°—Ä–æ–∫ –∏—Å—Ç—ë–∫"

            if current_amount >= target_amount:
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(title, f"{current_amount}/{target_amount}", "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"),
                    tags=("completed",)
                )

            else:
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(
                        title,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
                        f"{target_amount}",  # –¶–µ–ª—å
                        f"{current_amount}",  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞
                        remaining_text  # –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏
                    )
                )

    def add_goal_window(self):
        add_goal_window = tk.Toplevel(self)
        add_goal_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
        add_goal_window.geometry("300x300")
        add_goal_window.resizable(False, False)

        tk.Label(add_goal_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:").pack(pady=10)
        title_entry = tk.Entry(add_goal_window)
        title_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–°—É–º–º–∞ —Ü–µ–ª–∏ (‚ÇΩ):").pack(pady=10)
        target_amount_entry = tk.Entry(add_goal_window)
        target_amount_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=10)
        target_date_entry = tk.Entry(add_goal_window)
        target_date_entry.pack(pady=5)



        def save_goal():
            title = title_entry.get()
            target_amount = target_amount_entry.get()
            target_date = target_date_entry.get()

            if not title or not target_amount or not target_date:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            if not validate_date(target_date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            try:
                target_amount = float(target_amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—è creation_date
            creation_date = datetime.now().strftime("%Y-%m-%d")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì–ì–ì-–ú–ú-–î–î"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO goals (user_id, title, target_amount, current_amount, target_date, creation_date)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (self.user[0], title, target_amount, 0, target_date, creation_date))  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ = 0
            conn.commit()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_goal_window.destroy()

            self.update_goals_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π

        tk.Button(add_goal_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å", command=save_goal).pack(pady=10)

    def setup_reminders_page(self):
        tk.Label(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", font=("Arial", 16)).pack(pady=10)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.reminders_tree = ttk.Treeview(self.reminders_page, columns=("Title", "Date", "Time", "Description"), show="headings")
        self.reminders_tree.heading("Title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.reminders_tree.heading("Date", text="–î–∞—Ç–∞")
        self.reminders_tree.heading("Time", text="–í—Ä–µ–º—è")
        self.reminders_tree.heading("Description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        self.reminders_tree.pack(fill=tk.BOTH, expand=True)
        self.reminders_tree.column("Time", stretch=False, width=100 )

        tk.Button(self.reminders_page, text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.add_reminder_window).pack(pady=10)

        tk.Button(self.reminders_page, text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.delete_reminder).pack(pady=5)

        self.load_reminders()

    def load_reminders(self):
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        for item in self.reminders_tree.get_children():
            self.reminders_tree.delete(item)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT title, date, time, description_reminder FROM reminders WHERE user_id = ?', (self.user[0],))
        for row in cursor.fetchall():
            self.reminders_tree.insert("", tk.END, values=row)
        conn.close()

    def delete_reminder(self):
        selected_item = self.reminders_tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        item_values = self.reminders_tree.item(selected_item)['values']
        title = item_values[0]
        date = item_values[1]
        time = item_values[2]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{title}'?"):
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("DELETE FROM reminders WHERE user_id=? AND title=? AND date=? AND time=?",
                               (self.user[0], title, date, time))
                conn.commit()
                conn.close()

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ Treeview
                self.reminders_tree.delete(selected_item)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

    def add_reminder_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        add_window.geometry("300x400")
        add_window.resizable(False, False)

        tk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=5)
        title_entry = tk.Entry(add_window)
        title_entry.pack(pady=5)

        tk.Label(add_window, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=5)
        date_entry = tk.Entry(add_window)
        date_entry.pack(pady=5)

        tk.Label(add_window, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").pack(pady=5)
        time_entry = tk.Entry(add_window)
        time_entry.pack(pady=5)

        tk.Label(add_window, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(pady=5)
        description_entry = tk.Entry(add_window)
        description_entry.pack(pady=5)

        def validate_time(time_str):
            try:
                datetime.strptime(time_str, "%H:%M")
                return True
            except ValueError:
                return False


        def save_reminder():
            title = title_entry.get()
            date = date_entry.get()
            time = time_entry.get()
            description = description_entry.get()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            if not title or not date or not time:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            if not validate_date(date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not validate_time(time):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
            if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s\-.,!?]+$", title):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return

            if description and not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s\-.,!?]+$", description):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO reminders (user_id, title, date, time, description_reminder) 
                    VALUES (?, ?, ?, ?, ?)
                """, (self.user[0], title, date, time, description))
                conn.commit()
                conn.close()

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                add_window.destroy()
                self.load_reminders()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_reminder).pack(pady=10)

#        self.check_reminders_loop()

    def check_reminders(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.
        """
        now = datetime.now()
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT id, title, date, time FROM reminders WHERE user_id = ?', (self.user[0],))
        reminders = cursor.fetchall()

        for reminder_id, title, date_str, time_str in reminders:
            if not date_str.strip() or not time_str.strip():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
                continue

            try:
                reminder_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")

                if reminder_datetime < now:
                    # –ü–æ–º–µ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                    cursor.execute('''
                        UPDATE reminders 
                        SET description_reminder = ?, date = '', time = '' 
                        WHERE id = ?''',
                                   ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", reminder_id))

                if now <= reminder_datetime <= now + timedelta(minutes=30):
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø—è—Ç
                    messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}")

            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID {reminder_id}: {e}")

        conn.commit()
        conn.close()

    def check_reminders_loop(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç.
        """

        def delayed_check():
            self.check_reminders()
            self.after(600000, delayed_check)  # 300000 –º—Å = 1 –º–∏–Ω—É—Ç

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫–Ω–∞)
        self.after(1000, delayed_check)



    def update_goal_progress(self, amount):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, current_amount, target_amount FROM goals WHERE user_id = ?
        ''', (self.user[0],))
        goals = cursor.fetchall()

        #if not goals:
        #    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        #    conn.close()
        #    return

        for goal_id, current_amount, target_amount in goals:
            new_amount = current_amount + amount

            if new_amount >= target_amount:
                cursor.execute('''
                    UPDATE goals SET current_amount = ?, target_amount = 0 WHERE id = ?
                ''', (target_amount, goal_id))
                messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", f"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            else:
                cursor.execute('''
                    UPDATE goals SET current_amount = ? WHERE id = ?
                ''', (new_amount, goal_id))

        conn.commit()
        conn.close()

        self.update_goals_list()

    def delete_completed_goal(self):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        selected_item = self.goals_tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item_values = self.goals_tree.item(selected_item)['values']
        title = item_values[0]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å '{title}'?"):
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()

                # –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cursor.execute("""
                    DELETE FROM goals 
                    WHERE user_id = ? AND title = ?
                """, (self.user[0], title))
                conn.commit()
                conn.close()

                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ Treeview
                self.goals_tree.delete(selected_item)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å: {e}")

def validate_date(date_str):
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        return date >= datetime.now().date()
    except ValueError:
        return False

def clear_text():
    login_entry.delete(0, 'end')
    password_entry.delete(0, 'end')
    confirm_password_entry.delete(0, 'end')

def register():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()

    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return

    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (login, password) VALUES (?, ?)", (login, password))
        conn.commit()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        clear_text()
    except sqlite3.IntegrityError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    finally:
        conn.close()


def login():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()
    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return
    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return


    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE login = ? AND password = ?", (login, password))
    user = cursor.fetchone() # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –±–¥ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ(–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
    conn.close()


    if user and password == confirm_password:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        window.destroy()
        app = FinanceAssistantApp(user)
        app.mainloop()
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


#create_db()

window = tk.Tk()
window.resizable(width=False, height=False)
window.title("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
window.geometry("800x600")

icon = PhotoImage(file= "logo.png")
window.iconphoto(False, icon)

app_label = tk.Label(window, text = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫",fg="#57a1f8", font=('Microsoft Yahei UI Light',23,'bold'), pady=40)
app_label.place(relx=.5,anchor="n")
login_label = tk.Label(window, text="–õ–æ–≥–∏–Ω:")
login_label.place(x=370,y=100)
login_entry = tk.Entry(window)
login_entry.place(x=300,y=130)

password_label = tk.Label(window, text="–ü–∞—Ä–æ–ª—å:")
password_label.place(x=367,y=180)
password_entry = tk.Entry(window, show="*")
password_entry.place(x=300, y = 210)

confirm_password_label = tk.Label(window, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:")
confirm_password_label.place(x=315, y = 260)
confirm_password_entry = tk.Entry(window, show="*")
confirm_password_entry.place(x=300, y = 290)

login_button = tk.Button(window, text="–í—Ö–æ–¥", command=login)
login_button.place(x=300,y=320)

register_button = tk.Button(window, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=register)
register_button.place(x=375,y=320)

window.mainloop()