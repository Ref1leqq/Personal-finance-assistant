import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import sqlite3
from datetime import datetime


def create_db():
    conn = sqlite3.connect('users.db') #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor() #—Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            login TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT,
            target_amount REAL NOT NULL,
            current_amount REAL DEFAULT 0,
            creation_date TEXT NOT NULL,
            target_date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            category TEXT NOT NULL,
            amount REAL NOT NULL,
            date TEXT NOT NULL,
            type TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    conn.commit()
    conn.close()



class FinanceAssistantApp(tk.Tk):
    def __init__(self, user):
        super().__init__()
        self.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")
        self.user = user
        icon = PhotoImage(file = "logo.png")
        self.iconphoto(False, icon)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_interface()


    def create_main_interface(self):
        # –í–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–µ–π–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∑–Ω–∞—á–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_frame = tk.Frame(self, bg="lightblue")
        top_frame.pack(fill=tk.X)

        user_icon = tk.Label(top_frame, text="üë§", font=("Arial", 24), bg="lightblue")
        user_icon.pack(side=tk.LEFT, padx=10)

        user_label = tk.Label(top_frame, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.user[1]}!", font=("Arial", 16), bg="lightblue")
        user_label.pack(side=tk.LEFT)


        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self)
        notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∏
        self.home_page = tk.Frame(notebook)
        self.transactions_page = tk.Frame(notebook)
        self.goals_page = tk.Frame(notebook)
        self.reminders_page = tk.Frame(notebook)

        notebook.add(self.home_page, text="–ì–ª–∞–≤–Ω–∞—è")
        notebook.add(self.transactions_page, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        notebook.add(self.goals_page, text="–¶–µ–ª–∏")
        notebook.add(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self.setup_home_page()
        self.setup_transactions_page()
        self.setup_goals_page()
        self.setup_reminders_page()

    def setup_home_page(self):
        tk.Label(self.home_page, text="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", font=("Arial", 16)).pack(pady=10)

        self.balance_label = tk.Label(self.home_page, text="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 RUB", font=("Arial", 14))
        self.balance_label.pack(pady=10)

        self.earnings_label = tk.Label(self.home_page, text="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.earnings_label.pack(pady=5)

        self.expenses_label = tk.Label(self.home_page, text="–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.expenses_label.pack(pady=5)

        tk.Button(self.home_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", command=self.add_transaction_window).pack(pady=10)

        self.update_balance()

    def update_balance(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT SUM(CASE WHEN type = "–î–æ—Ö–æ–¥" THEN amount ELSE 0 END) as total_income,
                   SUM(CASE WHEN type = "–†–∞—Å—Ö–æ–¥" THEN amount ELSE 0 END) as total_expense
            FROM transactions
            WHERE user_id = ?
        ''', (self.user[0],))
        result = cursor.fetchone()
        conn.close()

        total_income = result[0] if result[0] is not None else 0.0
        total_expense = result[1] if result[1] is not None else 0.0
        current_balance = total_income - total_expense

        self.balance_label.config(text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} RUB")
        self.earnings_label.config(text=f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_income:.2f} RUB")
        self.expenses_label.config(text=f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_expense:.2f} RUB")

    def setup_transactions_page(self):
        tk.Label(self.transactions_page, text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", font=("Arial", 16)).pack(pady=10)
        self.transactions_tree = ttk.Treeview(self.transactions_page, columns=("category", "amount","type", "date"), show="headings")
        self.transactions_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.transactions_tree.heading("amount", text="–°—É–º–º–∞")
        self.transactions_tree.heading("type", text="–¢–∏–ø")
        self.transactions_tree.heading("date", text="–î–∞—Ç–∞")
        self.transactions_tree.pack(fill=tk.BOTH, expand=True)
        self.update_transactions_list()

    def update_transactions_list(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT category, amount, type, date FROM transactions WHERE user_id = ?
        """, (self.user[0],))
        transactions = cursor.fetchall()
        conn.close()

        for row in self.transactions_tree.get_children():
            self.transactions_tree.delete(row)

        for transaction in transactions:
            self.transactions_tree.insert("", tk.END, values=transaction)

    def add_transaction_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        add_window.geometry("300x400")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫

        tk.Label(add_window, text="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:").pack(pady=5)

        transaction_type = tk.StringVar(value="–†–∞—Å—Ö–æ–¥")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - "–†–∞—Å—Ö–æ–¥"

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        def update_categories():
            if transaction_type.get() == "–î–æ—Ö–æ–¥":
                combobox["values"] = []  # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
                category_entry.config(state=tk.NORMAL)  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥
            else:
                combobox["values"] = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–¢–∞–∫—Å–∏"]  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
                category_entry.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                category_entry.config(state=tk.DISABLED)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥

        income_radiobutton = tk.Radiobutton(add_window, text="–î–æ—Ö–æ–¥", variable=transaction_type, value="–î–æ—Ö–æ–¥",
                                            command=update_categories)
        income_radiobutton.pack()
        expense_radiobutton = tk.Radiobutton(add_window, text="–†–∞—Å—Ö–æ–¥", variable=transaction_type, value="–†–∞—Å—Ö–æ–¥",
                                             command=update_categories)
        expense_radiobutton.pack()

        tk.Label(add_window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").pack(pady=5)

        # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        combobox = ttk.Combobox(add_window)
        combobox.pack(padx=6, pady=6)

        category_entry = tk.Entry(add_window, state=tk.DISABLED)  # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
        category_entry.pack(padx=6, pady=6)

        tk.Label(add_window, text="–°—É–º–º–∞:").pack(pady=5)
        amount_entry = tk.Entry(add_window)
        amount_entry.pack(pady=5)

        def save_transaction():
            category = category_entry.get() if transaction_type.get() == "–î–æ—Ö–æ–¥" else combobox.get()
            amount = amount_entry.get()
            transaction_type_value = transaction_type.get()

            if not category or not amount:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            try:
                amount = float(amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO transactions (user_id, category, amount, date, type) VALUES (?, ?, ?, ?, ?)
            """, (self.user[0], category, amount, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), transaction_type_value))
            conn.commit()
            conn.close()

            if transaction_type_value == "–î–æ—Ö–æ–¥":
                self.update_goal_progress(amount)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_window.destroy()
            self.update_transactions_list()
            self.update_balance()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_transaction).pack(pady=10)

    def setup_goals_page(self):
        tk.Label(self.goals_page, text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", font=("Arial", 16)).pack(pady=10)

        self.goals_tree = ttk.Treeview(self.goals_page, columns=("title", "target_amount", "remaining"), show="headings")
        self.goals_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.goals_tree.heading("target_amount", text="–¶–µ–ª—å (‚ÇΩ)")
        self.goals_tree.heading("remaining", text="–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏")
        self.goals_tree.pack(fill=tk.BOTH, expand=True, pady=10)

        tk.Button(self.goals_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", command=self.add_goal_window).pack(pady=10)

        self.update_goals_list()

    def update_goals_list(self):
        for row in self.goals_tree.get_children():
            self.goals_tree.delete(row)

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, target_amount, current_amount, target_date
            FROM goals
            WHERE user_id = ?
        ''', (self.user[0],))
        goals = cursor.fetchall()
        conn.close()

        for goal_id, title, target_amount, current_amount, target_date in goals:
            remaining_days = (datetime.strptime(target_date, "%Y-%m-%d") - datetime.now()).days
            remaining_text = f"{remaining_days} –¥–Ω." if remaining_days > 0 else "–°—Ä–æ–∫ –∏—Å—Ç—ë–∫"

            # –ï—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É
            if current_amount >= target_amount:
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(title, f"{current_amount}/{target_amount}", "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"),
                    tags=("completed",)
                )
                delete_button = tk.Button(self.goals_page, text="–£–¥–∞–ª–∏—Ç—å",
                                          command=lambda gid=goal_id: self.delete_completed_goal(gid))
                delete_button.pack(pady=5)
            else:
                self.goals_tree.insert("", tk.END, values=(title, f"{current_amount}/{target_amount}", remaining_text))

    def add_goal_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
        add_window.geometry("400x300")

        tk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:").pack(pady=5)
        title_entry = tk.Entry(add_window)
        title_entry.pack(pady=5)

        tk.Label(add_window, text="–°—É–º–º–∞ —Ü–µ–ª–∏ (‚ÇΩ):").pack(pady=5)
        amount_entry = tk.Entry(add_window)
        amount_entry.pack(pady=5)

        tk.Label(add_window, text="–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=5)
        date_entry = tk.Entry(add_window)
        date_entry.pack(pady=5)

        def save_goal():
            title = title_entry.get()
            try:
                target_amount = float(amount_entry.get())
                target_date = datetime.strptime(date_entry.get(), "%Y-%m-%d").date()
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return

            if not title or target_amount <= 0 or target_date <= datetime.now().date():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏.")
                return

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO goals (user_id, title, target_amount, creation_date, target_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (self.user[0], title, target_amount, datetime.now().strftime("%Y-%m-%d"), target_date))
            conn.commit()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            add_window.destroy()
            self.update_goals_list()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_goal).pack(pady=10)

    def setup_reminders_page(self):
        tk.Label(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", font=("Arial", 16)).pack(pady=10)

        self.reminders_list = tk.Listbox(self.reminders_page)
        self.reminders_list.pack(fill=tk.BOTH, expand=True)

        tk.Button(self.reminders_page, text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.add_reminder_window).pack(pady=10)

    def add_reminder_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        add_window.geometry("300x300")
        add_window.resizable(False, False)

        tk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=5)
        title_entry = tk.Entry(add_window)
        title_entry.pack(pady=5)

        tk.Label(add_window, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=5)
        date_entry = tk.Entry(add_window)
        date_entry.pack(pady=5)

        tk.Label(add_window, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").pack(pady=5)
        time_entry = tk.Entry(add_window)
        time_entry.pack(pady=5)

        def save_reminder():
            title = title_entry.get()
            date = date_entry.get()
            time = time_entry.get()

            if not title or not date or not time:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO reminders (user_id, title, date, time) VALUES (?, ?, ?, ?)
            """, (self.user[0], title, date, time))
            conn.commit()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            add_window.destroy()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_reminder).pack(pady=10)

    def update_goal_progress(self, amount):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, current_amount, target_amount FROM goals WHERE user_id = ?
        ''', (self.user[0],))
        goals = cursor.fetchall()

        for goal_id, current_amount, target_amount in goals:
            new_amount = current_amount + amount

            if new_amount >= target_amount:
                cursor.execute('''
                    UPDATE goals SET current_amount = ?, target_amount = 0 WHERE id = ?
                ''', (target_amount, goal_id))
                messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", f"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            else:
                cursor.execute('''
                    UPDATE goals SET current_amount = ? WHERE id = ?
                ''', (new_amount, goal_id))

        conn.commit()
        conn.close()

        self.update_goals_list()

    def delete_completed_goal(self, goal_id):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM goals WHERE id = ?", (goal_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
        self.update_goals_list()



def clear_text():
    login_entry.delete(0, 'end')
    password_entry.delete(0, 'end')
    confirm_password_entry.delete(0, 'end')

def register():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()

    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return

    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (login, password) VALUES (?, ?)", (login, password))
        conn.commit()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        clear_text()
    except sqlite3.IntegrityError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    finally:
        conn.close()


def login():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()
    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return
    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE login = ? AND password = ?", (login, password))
    user = cursor.fetchone()
    conn.close()

    if user and password == confirm_password:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        window.destroy()
        app = FinanceAssistantApp(user)
        app.mainloop()
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


create_db()

window = tk.Tk()
window.resizable(width=False, height=False)
window.title("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
window.geometry("800x600")

icon = PhotoImage(file= "logo.png")
window.iconphoto(False, icon)

nameapp_label = tk.Label(window, text = "Finance Helper",fg="#57a1f8", font=('Microsoft Yahei UI Light',23,'bold'))
nameapp_label.place(relx=.5,anchor="n")
login_label = tk.Label(window, text="–õ–æ–≥–∏–Ω:")
login_label.place(x=370,y=100)
login_entry = tk.Entry(window)
login_entry.place(x=300,y=130)

password_label = tk.Label(window, text="–ü–∞—Ä–æ–ª—å:")
password_label.place(x=367,y=180)
password_entry = tk.Entry(window, show="*")
password_entry.place(x=300, y = 210)

confirm_password_label = tk.Label(window, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:")
confirm_password_label.place(x=315, y = 260)
confirm_password_entry = tk.Entry(window, show="*")
confirm_password_entry.place(x=300, y = 290)

login_button = tk.Button(window, text="–í—Ö–æ–¥", command=login)
login_button.place(x=300,y=320)

register_button = tk.Button(window, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=register)
register_button.place(x=375,y=320)

window.mainloop()
#1