import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import sqlite3
from datetime import datetime, timedelta
import threading
import re
import pandas as pd
import matplotlib.pyplot as plt 
import time   

def create_db():
    conn = sqlite3.connect('users.db') #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor() #—Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            login TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT,
            target_amount REAL NOT NULL,
            current_amount REAL DEFAULT 0,
            creation_date TEXT NOT NULL,
            target_date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            description_reminder TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            category TEXT NOT NULL,
            amount REAL NOT NULL,
            date TEXT NOT NULL,
            type TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    conn.commit()
    conn.close()

create_db()


class FinanceAssistantApp(tk.Tk):
    def __init__(self, user):
        super().__init__()
        self.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")
        self.user = user
        icon = PhotoImage(file="logo.png")
        self.iconphoto(False, icon)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_interface()



    def create_main_interface(self):
        # –í–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–µ–π–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∑–Ω–∞—á–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_frame = tk.Frame(self, bg="lightblue")
        top_frame.pack(fill=tk.X)

        user_icon = tk.Label(top_frame, text="üë§", font=("Arial", 24), bg="lightblue")
        user_icon.pack(side=tk.LEFT, padx=15)

        user_label = tk.Label(top_frame, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.user[1]}!", font=("Arial", 16), bg="lightblue")
        user_label.pack(side=tk.LEFT)


        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self)
        notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∏
        self.home_page = tk.Frame(notebook)
        self.diagrams_page = tk.Frame(notebook)
        self.transactions_page = tk.Frame(notebook)
        self.goals_page = tk.Frame(notebook)
        self.reminders_page = tk.Frame(notebook)

        notebook.add(self.home_page, text="–ì–ª–∞–≤–Ω–∞—è")
        notebook.add(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã")
        notebook.add(self.transactions_page, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        notebook.add(self.goals_page, text="–¶–µ–ª–∏")
        notebook.add(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self.setup_home_page()
        self.setup_diagrams_page()
        self.setup_transactions_page()
        self.setup_goals_page()
        self.setup_reminders_page()

#        self.check_reminders()

    def setup_home_page(self):
        tk.Label(self.home_page, text="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", font=("Arial", 16)).pack(pady=10)

        self.balance_label = tk.Label(self.home_page, text="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 RUB", font=("Arial", 14))
        self.balance_label.pack(pady=10)

        self.earnings_label = tk.Label(self.home_page, text="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.earnings_label.pack(pady=5)

        self.expenses_label = tk.Label(self.home_page, text="–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0.00 RUB", font=("Arial", 12))
        self.expenses_label.pack(pady=5)

        tk.Button(self.home_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", command=self.add_transaction_window).pack(pady=10)

        self.update_balance()

    def update_balance(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT SUM(CASE WHEN type = "–î–æ—Ö–æ–¥" THEN amount ELSE 0 END) as total_income,
                SUM(CASE WHEN type = "–†–∞—Å—Ö–æ–¥" THEN amount ELSE 0 END) as total_expense
            FROM transactions
            WHERE user_id = ?
        ''', (self.user[0],))
        result = cursor.fetchone()
        conn.close()

        total_income = result[0] if result[0] is not None else 0.0
        total_expense = result[1] if result[1] is not None else 0.0
        current_balance = total_income - total_expense

        self.balance_label.config(text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} RUB")
        self.earnings_label.config(text=f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_income:.2f} RUB")
        self.expenses_label.config(text=f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_expense:.2f} RUB")
    
    def setup_diagrams_page(self):
        tk.Label(self.diagrams_page, text="–î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤", font=("Arial", 16)).pack(pady=10)
        tk.Button(self.diagrams_page, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã", command=self.create_diagrams).pack(pady=10)

    def create_diagrams(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        cursor.execute('''
            SELECT category, amount, type
            FROM transactions
            WHERE user_id = ?
        ''', (self.user[0],))
        data = cursor.fetchall()
        conn.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(data, columns=['Category', 'Amount', 'Type'])

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
        income_df = df[df['Type'] == "–î–æ—Ö–æ–¥"]
        expense_df = df[df['Type'] == "–†–∞—Å—Ö–æ–¥"]

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
        plt.figure(figsize=(10, 6))
        income_df.groupby('Category').sum()['Amount'].plot(kind='bar', title="–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞ (‚ÇΩ)")
        plt.show()

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        plt.figure(figsize=(10, 6))
        expense_df.groupby('Category').sum()['Amount'].plot(kind='bar', title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞ (‚ÇΩ)")
        plt.show()

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
        plt.figure(figsize=(8, 8))
        income_df.groupby('Category').sum()['Amount'].plot.pie(autopct='%1.1f%%', title="–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.ylabel('')
        plt.show()

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        plt.figure(figsize=(8, 8))
        expense_df.groupby('Category').sum()['Amount'].plot.pie(autopct='%1.1f%%', title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.ylabel('')
        plt.show()

    def setup_transactions_page(self):
        tk.Label(self.transactions_page, text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", font=("Arial", 16)).pack(pady=10)
        self.transactions_tree = ttk.Treeview(self.transactions_page, columns=("category", "amount","type", "date"), show="headings")
        self.transactions_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.transactions_tree.heading("amount", text="–°—É–º–º–∞")
        self.transactions_tree.heading("type", text="–¢–∏–ø")
        self.transactions_tree.heading("date", text="–î–∞—Ç–∞")
        self.transactions_tree.pack(fill=tk.BOTH, expand=True)
        self.update_transactions_list()

    def update_transactions_list(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT category, amount, type, date FROM transactions WHERE user_id = ?
        """, (self.user[0],))
        transactions = cursor.fetchall()
        conn.close()

        for row in self.transactions_tree.get_children():
            self.transactions_tree.delete(row)

        for transaction in transactions:
            self.transactions_tree.insert("", tk.END, values=transaction)

    def add_transaction_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        add_window.geometry("300x400")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫

        tk.Label(add_window, text="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:").pack(pady=5)

        transaction_type = tk.StringVar(value="–†–∞—Å—Ö–æ–¥")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - "–†–∞—Å—Ö–æ–¥"

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        def update_categories():
            if transaction_type.get() == "–î–æ—Ö–æ–¥":
                combobox["values"] = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥—ã", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]  # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            else:
                combobox["values"] = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–¢–∞–∫—Å–∏"]  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞

        income_radiobutton = tk.Radiobutton(add_window, text="–î–æ—Ö–æ–¥", variable=transaction_type, value="–î–æ—Ö–æ–¥",
                                            command=update_categories)
        income_radiobutton.pack()
        expense_radiobutton = tk.Radiobutton(add_window, text="–†–∞—Å—Ö–æ–¥", variable=transaction_type, value="–†–∞—Å—Ö–æ–¥",
                                             command=update_categories)
        expense_radiobutton.pack()

        tk.Label(add_window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").pack(pady=5)

        # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        combobox = ttk.Combobox(add_window, state="readonly")
        combobox.pack(padx=6, pady=6)

        #category_entry = tk.Entry(add_window, state=tk.DISABLED)  # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
        #category_entry.pack(padx=6, pady=6)

        tk.Label(add_window, text="–°—É–º–º–∞:").pack(pady=5)
        amount_entry = tk.Entry(add_window)
        amount_entry.pack(pady=5)

        def save_transaction():
            category = combobox.get() #if transaction_type.get() == "–î–æ—Ö–æ–¥" else combobox.get()
            amount = amount_entry.get()
            transaction_type_value = transaction_type.get()

            if not amount:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            try:
                amount = float(amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO transactions (user_id, category, amount, date, type) VALUES (?, ?, ?, ?, ?)
            """, (self.user[0], category, amount, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), transaction_type_value))
            conn.commit()
            conn.close()

            if transaction_type_value == "–î–æ—Ö–æ–¥":
                self.update_goal_progress(amount)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_window.destroy()
            self.update_transactions_list()
            self.update_balance()

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_transaction).pack(pady=10)

    def setup_goals_page(self):
        tk.Label(self.goals_page, text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", font=("Arial", 16)).pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
        self.goals_tree = ttk.Treeview(self.goals_page, columns=("title", "target_amount", "current_amount", "remaining"), show="headings")
        self.goals_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.goals_tree.heading("target_amount", text="–¶–µ–ª—å (‚ÇΩ)")
        self.goals_tree.heading("current_amount", text="–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ (‚ÇΩ)")
        self.goals_tree.heading("remaining", text="–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏")
        self.goals_tree.pack(fill=tk.BOTH, expand=True, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
        tk.Button(self.goals_page, text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", command=self.add_goal_window).pack(pady=10)
        tk.Button(self.goals_page, text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å", command=self.top_up_goal).pack(pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        self.update_goals_list()  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π

    def top_up_goal(self):
        selected_item = self.goals_tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        item_values = self.goals_tree.item(selected_item)['values']
        goal_id = item_values[0]  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
        current_amount = float(item_values[1])  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ü–µ–ª–∏

        top_up_window = tk.Toplevel(self)
        top_up_window.title("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏")
        top_up_window.geometry("300x200")

        tk.Label(top_up_window, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:").pack(pady=10)
        amount_entry = tk.Entry(top_up_window)
        amount_entry.pack(pady=10)

        def save_top_up():
            try:
                amount = float(amount_entry.get())
                if amount <= 0:
                    raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT balance FROM users WHERE id = ?', (self.user[0],))
                user_balance = cursor.fetchone()[0]

                print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                if isinstance(user_balance, str):
                    user_balance = float(user_balance)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                if amount > user_balance:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ë–∞–ª–∞–Ω—Å: {user_balance}")
                    conn.close()
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ü–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('''
                    UPDATE goals SET current_amount = current_amount + ? WHERE id = ?
                ''', (amount, goal_id))
                conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—É–º–º–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞)
                cursor.execute('''
                    UPDATE users
                    SET balance = balance - ?
                    WHERE id = ?
                ''', (amount, self.user[0]))
                conn.commit()

                conn.close()

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.update_balance()  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                self.update_goals_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π

                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¶–µ–ª—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {amount}‚ÇΩ.")
                top_up_window.destroy()

            except ValueError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lambda, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å self –≤ –º–µ—Ç–æ–¥ save_top_up
        tk.Button(top_up_window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=lambda: save_top_up()).pack(pady=10)

    def update_goals_list(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for row in self.goals_tree.get_children():
            self.goals_tree.delete(row)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, target_amount, current_amount, target_date
            FROM goals
            WHERE user_id = ?
        ''', (self.user[0],))  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goals = cursor.fetchall()
        conn.close()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª—è—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
        for goal_id, title, target_amount, current_amount, target_date in goals:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
            remaining_days = (datetime.strptime(target_date, "%Y-%m-%d") - datetime.now()).days
            remaining_text = f"{remaining_days + 1} –¥–Ω." if remaining_days >= 0 else "–°—Ä–æ–∫ –∏—Å—Ç—ë–∫"

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if current_amount >= target_amount:
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(title, f"{current_amount}/{target_amount}", "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"),
                    tags=("completed",)
                )
                delete_button = tk.Button(self.goals_page, text="–£–¥–∞–ª–∏—Ç—å",
                                          command=lambda gid=goal_id: self.delete_completed_goal(gid))
                delete_button.pack(pady=5)
            else:
                self.goals_tree.insert(
                    "",
                    tk.END,
                    values=(
                        title,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
                        f"{target_amount}",  # –¶–µ–ª—å
                        f"{current_amount}",  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞
                        remaining_text  # –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏
                    )
                )

    def add_goal_window(self):
        add_goal_window = tk.Toplevel(self)
        add_goal_window.title("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
        add_goal_window.geometry("300x300")
        add_goal_window.resizable(False, False)

        tk.Label(add_goal_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:").pack(pady=10)
        title_entry = tk.Entry(add_goal_window)
        title_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–°—É–º–º–∞ —Ü–µ–ª–∏ (‚ÇΩ):").pack(pady=10)
        target_amount_entry = tk.Entry(add_goal_window)
        target_amount_entry.pack(pady=5)

        tk.Label(add_goal_window, text="–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=10)
        target_date_entry = tk.Entry(add_goal_window)
        target_date_entry.pack(pady=5)


        #if not validate_date(targetdate):
        #    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        #    return


        def save_goal():
            title = title_entry.get()
            target_amount = target_amount_entry.get()
            target_date = target_date_entry.get()

            if not title or not target_amount or not target_date:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            if not validate_date(target_date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            try:
                target_amount = float(target_amount)
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—è creation_date
            creation_date = datetime.now().strftime("%Y-%m-%d")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì–ì–ì-–ú–ú-–î–î"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO goals (user_id, title, target_amount, current_amount, target_date, creation_date)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (self.user[0], title, target_amount, 0, target_date, creation_date))  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ = 0
            conn.commit()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            add_goal_window.destroy()

            self.update_goals_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π

        tk.Button(add_goal_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å", command=save_goal).pack(pady=10)

    def setup_reminders_page(self):
        tk.Label(self.reminders_page, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", font=("Arial", 16)).pack(pady=10)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.reminders_tree = ttk.Treeview(self.reminders_page, columns=("Title", "Date", "Time", "Description"), show="headings")
        self.reminders_tree.heading("Title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.reminders_tree.heading("Date", text="–î–∞—Ç–∞")
        self.reminders_tree.heading("Time", text="–í—Ä–µ–º—è")
        self.reminders_tree.heading("Description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        self.reminders_tree.pack(fill=tk.BOTH, expand=True)
        self.reminders_tree.column("Time", stretch=False, width=100 )

        tk.Button(self.reminders_page, text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.add_reminder_window).pack(pady=10)

        tk.Button(self.reminders_page, text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command=self.delete_reminder).pack(pady=5)

        self.load_reminders()

    def load_reminders(self):
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        for item in self.reminders_tree.get_children():
            self.reminders_tree.delete(item)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT title, date, time, description_reminder FROM reminders WHERE user_id = ?', (self.user[0],))
        for row in cursor.fetchall():
            self.reminders_tree.insert("", tk.END, values=row)
        conn.close()

    def delete_reminder(self):
        selected_item = self.reminders_tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        item_values = self.reminders_tree.item(selected_item)['values']
        title = item_values[0]
        date = item_values[1]
        time = item_values[2]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{title}'?"):
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("DELETE FROM reminders WHERE user_id=? AND title=? AND date=? AND time=?",
                               (self.user[0], title, date, time))
                conn.commit()
                conn.close()

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ Treeview
                self.reminders_tree.delete(selected_item)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

    def add_reminder_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        add_window.geometry("300x400")
        add_window.resizable(False, False)

        tk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=5)
        title_entry = tk.Entry(add_window)
        title_entry.pack(pady=5)

        tk.Label(add_window, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").pack(pady=5)
        date_entry = tk.Entry(add_window)
        date_entry.pack(pady=5)

        tk.Label(add_window, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").pack(pady=5)
        time_entry = tk.Entry(add_window)
        time_entry.pack(pady=5)

        tk.Label(add_window, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(pady=5)
        description_entry = tk.Entry(add_window)
        description_entry.pack(pady=5)


        #def validate_date(date_str):
        #    try:
        #        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        #        return date >= datetime.now().date()
        #    except ValueError:
        #        return False

        def validate_time(time_str):
            try:
                datetime.strptime(time_str, "%H:%M")
                return True
            except ValueError:
                return False


        def save_reminder():
            title = title_entry.get()
            date = date_entry.get()
            time = time_entry.get()
            description = description_entry.get()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            if not title or not date or not time:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            if not validate_date(date):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not validate_time(time):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
            if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s\-.,!?]+$", title):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return

            if description and not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s\-.,!?]+$", description):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO reminders (user_id, title, date, time, description_reminder) 
                    VALUES (?, ?, ?, ?, ?)
                """, (self.user[0], title, date, time, description))
                conn.commit()
                conn.close()

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                add_window.destroy()
                self.load_reminders()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        tk.Button(add_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_reminder).pack(pady=10)

        def check_reminders_db(self):
            def check_db():
                now = datetime.now()
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute('SELECT title, date, time FROM reminders WHERE user_id = ?', (self.user[0],))
                reminders = cursor.fetchall()
                conn.close()

                for title, date_str, time_str in reminders:
                    reminder_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                    if now <= reminder_time <= now + timedelta(minutes=1):
                        messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}")

                # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                self.after(60000, check_db)

            check_db()


        def check_db():
            now = datetime.now()
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute('SELECT title, date, time FROM reminders WHERE user_id = ?', (self.user[0],))
            reminders = cursor.fetchall()
            conn.close()

            for title, date_str, time_str in reminders:
                reminder_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                if now <= reminder_time <= now + timedelta(minutes=1):
                    messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}")

            # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            self.after(60000, check_db)
            check_db()


            def check_reminders():
                print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω
                while True:
                    now = datetime.now()
                    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M')}")  # –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

                    try:
                        conn = sqlite3.connect('users.db')
                        cursor = conn.cursor()
                        cursor.execute('''
                            SELECT title, date, time
                            FROM reminders
                            WHERE user_id = ? AND date = ? AND time = ?
                        ''', (self.user[0], now.strftime("%Y-%m-%d"), "18:25"))
                        
                        reminders = cursor.fetchall()
                        conn.close()

                        if reminders:
                            for reminder in reminders:
                                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {reminder[0]}")  # –ü–µ—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"{reminder[0]} –Ω–∞—Å—Ç—É–ø–∏–ª–æ!")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            print("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            threading.Thread(target=check_reminders, daemon=True).start()  # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫





    def update_goal_progress(self, amount):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, current_amount, target_amount FROM goals WHERE user_id = ?
        ''', (self.user[0],))
        goals = cursor.fetchall()

        if not goals:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")
            conn.close()
            return

        for goal_id, current_amount, target_amount in goals:
            new_amount = current_amount + amount

            if new_amount >= target_amount:
                cursor.execute('''
                    UPDATE goals SET current_amount = ?, target_amount = 0 WHERE id = ?
                ''', (target_amount, goal_id))
                messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", f"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            else:
                cursor.execute('''
                    UPDATE goals SET current_amount = ? WHERE id = ?
                ''', (new_amount, goal_id))

        conn.commit()
        conn.close()

        self.update_goals_list()

    def delete_completed_goal(self, goal_id):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM goals WHERE id = ?", (goal_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
        self.update_goals_list()

def validate_date(date_str):
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d").date()
        return date >= datetime.now().date()
    except ValueError:
        return False

def clear_text():
    login_entry.delete(0, 'end')
    password_entry.delete(0, 'end')
    confirm_password_entry.delete(0, 'end')

def register():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()

    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return

    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (login, password) VALUES (?, ?)", (login, password))
        conn.commit()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        clear_text()
    except sqlite3.IntegrityError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    finally:
        conn.close()


def login():
    login = login_entry.get()
    password = password_entry.get()
    confirm_password = confirm_password_entry.get()
    if not login or not password or not confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return
    if password != confirm_password:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return


    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE login = ? AND password = ?", (login, password))
    user = cursor.fetchone()
    conn.close()


    if user and password == confirm_password:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        window.destroy()
        app = FinanceAssistantApp(user)
        app.mainloop()
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


#create_db()

window = tk.Tk()
window.resizable(width=False, height=False)
window.title("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
window.geometry("800x600")

icon = PhotoImage(file= "logo.png")
window.iconphoto(False, icon)

app_label = tk.Label(window, text = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫",fg="#57a1f8", font=('Microsoft Yahei UI Light',23,'bold'), pady=40)
app_label.place(relx=.5,anchor="n")
login_label = tk.Label(window, text="–õ–æ–≥–∏–Ω:")
login_label.place(x=370,y=100)
login_entry = tk.Entry(window)
login_entry.place(x=300,y=130)

password_label = tk.Label(window, text="–ü–∞—Ä–æ–ª—å:")
password_label.place(x=367,y=180)
password_entry = tk.Entry(window, show="*")
password_entry.place(x=300, y = 210)

confirm_password_label = tk.Label(window, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:")
confirm_password_label.place(x=315, y = 260)
confirm_password_entry = tk.Entry(window, show="*")
confirm_password_entry.place(x=300, y = 290)

login_button = tk.Button(window, text="–í—Ö–æ–¥", command=login)
login_button.place(x=300,y=320)

register_button = tk.Button(window, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=register)
register_button.place(x=375,y=320)

window.mainloop()